<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeightedRandomizer</name>
    </assembly>
    <members>
        <member name="T:Weighted_Randomizer.DynamicWeightedRandomizer`1">
            <summary>
            A implementation of a weighted randomizer which uses (for lack of a better term) a weighted self-balancing binary tree.
            Adding/removing/updating items, and calls to both NextWithRemoval() and NextWithReplacement(), and are relatively fast (O(log n))
            </summary>
            <typeparam name="TKey">The type of the objects to choose at random</typeparam>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.#ctor">
            <summary>
            Create a new DynamicWeightedRandomizer
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.#ctor(System.Int32)">
            <summary>
            Create a new DynamicWeightedRandomizer with the given seed
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.DynamicWeightedRandomizer`1.Count">
            <summary>
            Returns the number of items currently in the list
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Clear">
            <summary>
            Remove all items from the list
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.DynamicWeightedRandomizer`1.IsReadOnly">
            <summary>
            Returns false.  Necessary for the ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the keys to an array, in order
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Contains(`0)">
            <summary>
            Returns true if the given item has been added to the list; false otherwise
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Add(`0)">
            <summary>
            Adds the given item with a default weight of 1
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Add(`0,System.Int32)">
            <summary>
            Adds the given item with the given weight.  Higher weights are more likely to be chosen.
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Remove(`0)">
            <summary>
            Remoevs the given item from the list.
            </summary>
            <returns>Returns true if the item was successfully deleted, or false if it was not found</returns>
        </member>
        <member name="P:Weighted_Randomizer.DynamicWeightedRandomizer`1.TotalWeight">
            <summary>
            The total weight of all the items added so far
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.NextWithReplacement">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and replaces it so that it can be chosen again
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.NextWithRemoval">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and removes it so it cannot be chosen again
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.VerifyHaveItemsToChooseFrom">
            <summary>
            Throws an exception if the Count or TotalWeight are 0, meaning that are no items to choose from.
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.DynamicWeightedRandomizer`1.Item(`0)">
            <summary>
            Shortcut syntax to add, remove, and update an item
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.GetWeight(`0)">
            <summary>
            Returns the weight of the given item.  Throws an exception if the item is not added
            (use .Contains to check first if unsure)
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.SetWeight(`0,System.Int32)">
            <summary>
            Updates the weight of the given item, or adds it if it has not already been added.
            If weight &lt;= 0, the item is removed.
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.DynamicWeightedRandomizer`1.Height">
            <summary>
            Returns the height of the tree (very slow)
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.Assert(System.Boolean)">
            <summary>
            Quick hack to write quick tests
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.DynamicWeightedRandomizer`1.DebugCheckTree">
            <summary>
            Make sure the entire tree is valid (correct subtreeWeights, valid BST, that sort of thing)
            </summary>
        </member>
        <member name="T:Weighted_Randomizer.IWeightedRandomizer`1">
            <summary>
            Represents a class which can choose weighted items at random; that is, it can randomly choose items from a list, giving some items higher
            probability of being chosen than others.  It supports both choosing with replacement (so the same item can be chosen multiple times) and
            choosing with removal (so each item can be chosen only once).
            
            Note that though this interface is enumerable, the enumeration is not necessarily ordered by anything.
            </summary>
            <typeparam name="TKey">The type of the objects to choose at random</typeparam>
        </member>
        <member name="P:Weighted_Randomizer.IWeightedRandomizer`1.TotalWeight">
            <summary>
            The total weight of all the items added so far
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.IWeightedRandomizer`1.NextWithReplacement">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and replaces it so that it can be chosen again
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the collection is empty or has only 0-weight items
            </exception>
        </member>
        <member name="M:Weighted_Randomizer.IWeightedRandomizer`1.NextWithRemoval">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and removes it so it cannot be chosen again
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the collection is empty or has only 0-weight items
            </exception>
        </member>
        <member name="M:Weighted_Randomizer.IWeightedRandomizer`1.Add(`0,System.Int32)">
            <summary>
            Adds the given item with the given weight.  Higher weights are more likely to be chosen.
            If the key already exists in the collection, an exception is thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if weight &lt; 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the key already exists in the collection
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the key is null
            </exception>
        </member>
        <member name="P:Weighted_Randomizer.IWeightedRandomizer`1.Item(`0)">
            <summary>
            Shortcut syntax to add, remove, and update an item.  Higher weights are more likely to be chosen.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if attempting to retrieve a key which does not exist in the collection
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if attempting to set the weight to a value &lt; 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the key is null
            </exception>
        </member>
        <member name="M:Weighted_Randomizer.IWeightedRandomizer`1.GetWeight(`0)">
            <summary>
            Returns the weight of the given item.  Throws an exception if the item is not added
            (use .Contains to check first if unsure)
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the key does not exist in the collection
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the key is null
            </exception>
        </member>
        <member name="M:Weighted_Randomizer.IWeightedRandomizer`1.SetWeight(`0,System.Int32)">
            <summary>
            Updates the weight of the given item, or adds it to the collection if it has not already been added.
            Higher weights are more likely to be chosen.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if attempting to set the weight to a value &lt; 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the key is null
            </exception>
        </member>
        <member name="M:Weighted_Randomizer.RandomExtensionMethods.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns a random long from min (inclusive) to max (exclusive)
            </summary>
            <param name="random">The given random instance</param>
            <param name="min">The inclusive minimum bound</param>
            <param name="max">The exclusive maximum bound.  Must be greater or equal to min</param>
        </member>
        <member name="M:Weighted_Randomizer.RandomExtensionMethods.NextLong(System.Random,System.Int64)">
            <summary>
            Returns a random long from 0 (inclusive) to max (exclusive)
            </summary>
            <param name="random">The given random instance</param>
            <param name="max">The exclusive maximum bound.  Must be greater or equal to min</param>
        </member>
        <member name="M:Weighted_Randomizer.RandomExtensionMethods.NextLong(System.Random)">
            <summary>
            Returns a random long over all possible values of long (except long.MaxValue, similar to
            random.Next())
            </summary>
            <param name="random">The given random instance</param>
        </member>
        <member name="T:Weighted_Randomizer.StaticWeightedRandomizer`1">
            <summary>
            A weighted randomizer implementation which uses Vose's alias method.  It is very fast when doing many contiguous calls to NextWithReplacement().
            It is slow when making making calls to NextWithRemoval(), or when adding/removing/updating items often between calls to NextWithReplacement().
            </summary>
            <typeparam name="TKey">The type of the objects to choose at random</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Weighted_Randomizer.StaticWeightedRandomizer`1.ProbabilityBox" -->
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.#ctor">
            <summary>
            Create a new StaticWeightedRandomizer
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.#ctor(System.Int32)">
            <summary>
            Create a new StaticWeightedRandomizer with the given seed
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.#ctor(Weighted_Randomizer.ThreadAwareRandom)">
            <summary>
            A quick hack that allows me to share code between the two constructors but still set
            readonly fields
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.StaticWeightedRandomizer`1.Count">
            <summary>
            Returns the number of items currently in the list
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.Clear">
            <summary>
            Remove all items from the list
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.StaticWeightedRandomizer`1.IsReadOnly">
            <summary>
            Returns false.  Necessary for the ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the keys to an array, in order
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.Contains(`0)">
            <summary>
            Returns true if the given item has been added to the list; false otherwise
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.Add(`0)">
            <summary>
            Adds the given item with a default weight of 1
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.Add(`0,System.Int32)">
            <summary>
            Adds the given item with the given weight.  Higher weights are more likely to be chosen.
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.Remove(`0)">
            <summary>
            Remoevs the given item from the list.
            </summary>
            <returns>Returns true if the item was successfully deleted, or false if it was not found</returns>
        </member>
        <member name="P:Weighted_Randomizer.StaticWeightedRandomizer`1.TotalWeight">
            <summary>
            The total weight of all the items added so far
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.NextWithReplacement">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and replaces it so that it can be chosen again
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.DistributeKeysIntoStacks(System.Int64,System.Collections.Generic.Stack{Weighted_Randomizer.StaticWeightedRandomizer{`0}.KeyBallsPair},System.Collections.Generic.Stack{Weighted_Randomizer.StaticWeightedRandomizer{`0}.KeyBallsPair})">
            <summary>
            Step one:  Load the small list with all items whose total weight is less than _heightPerBox (after scaling)
            the large list with those that are greater.
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.CreateSplitProbabilityBoxes(System.Collections.Generic.Stack{Weighted_Randomizer.StaticWeightedRandomizer{`0}.KeyBallsPair},System.Collections.Generic.Stack{Weighted_Randomizer.StaticWeightedRandomizer{`0}.KeyBallsPair})">
            <summary>
            Step two:  Pair up each item in the large/small lists and create a probability box for them
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.AddRemainingProbabilityBoxes(System.Collections.Generic.Stack{Weighted_Randomizer.StaticWeightedRandomizer{`0}.KeyBallsPair})">
            <summary>
            Step three:  All the remining items in smallList necessarily have probability of 100%
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.NextWithRemoval">
            <summary>
            Returns an item chosen randomly by weight (higher weights are more likely),
            and removes it so it cannot be chosen again
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.VerifyHaveItemsToChooseFrom">
            <summary>
            Throws an exception if the Count or TotalWeight are 0, meaning that are no items to choose from.
            </summary>
        </member>
        <member name="P:Weighted_Randomizer.StaticWeightedRandomizer`1.Item(`0)">
            <summary>
            Shortcut syntax to add, remove, and update an item
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.GetWeight(`0)">
            <summary>
            Returns the weight of the given item.  Throws an exception if the item is not added
            (use .Contains to check first if unsure)
            </summary>
        </member>
        <member name="M:Weighted_Randomizer.StaticWeightedRandomizer`1.SetWeight(`0,System.Int32)">
            <summary>
            Updates the weight of the given item, or adds it if it has not already been added.
            If weight &lt;= 0, the item is removed.
            </summary>
        </member>
        <member name="T:Weighted_Randomizer.ThreadAwareRandom">
            <summary>
            A thread-aware version of the Random class.
            It is still NOT thread-safe, but different instances can still be used by different threads without issues
            (which is not true of Random - two instances of Random created on separate threads at nearly the same time
            will return all the same results, which is not what we want)
            
            Could also be used later, if I want, to allow a common interface between Random and RNGCryptoServiceProvider
            </summary>
        </member>
    </members>
</doc>
